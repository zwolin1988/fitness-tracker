// e2e/training-plans/create-plan-complete-flow.spec.ts
// Kompletny test E2E: Utworzenie planu treningowego od poczƒÖtku do ko≈Ñca
// Steps: Login ‚Üí Step 1 (basics) ‚Üí Step 2 (exercises) ‚Üí Step 3 (sets) ‚Üí Save ‚Üí Verify

import { expect, test } from "@playwright/test";

import { loginAsUser } from "../helpers/auth";
import { NavigationPage, PlanBasicsPage, PlansListPage } from "../page-objects";

test.describe("Kompletny flow tworzenia planu treningowego", () => {
  const testPlanName = `E2E Test Plan ${Date.now()}`; // Unique name

  test("Powinien utworzyƒá nowy plan treningowy - pe≈Çny flow (Steps 1-3)", async ({ page }) => {
    // ==========================================
    // ARRANGE - Login i przygotowanie
    // ==========================================
    await loginAsUser(page);

    const navigationPage = new NavigationPage(page);
    const plansListPage = new PlansListPage(page);
    const planBasicsPage = new PlanBasicsPage(page);

    // ==========================================
    // STEP 1: Podstawowe informacje
    // ==========================================
    console.log("üìç STEP 1: Wype≈Çnianie podstawowych informacji");

    await navigationPage.navigateToPlans();
    await plansListPage.expectPageLoaded();
    await plansListPage.clickCreatePlan();
    await planBasicsPage.expectFormLoaded();

    // Wype≈Çnij Step 1
    await planBasicsPage.fillAndSubmit(testPlanName, "E2E Test Description", "strength");

    // Kliknij jeszcze raz na przycisk "Dalej" bo formularz mo≈ºe nie przechodziƒá od razu
    // W Step 1 przycisk ma testid="plan-basics-next-button"
    console.log("üîÑ Klikam przycisk Dalej jeszcze raz...");
    await page.waitForTimeout(500);
    await page.getByTestId("plan-basics-next-button").click();

    // Sprawd≈∫ czy jeste≈õmy w Step 2 (czekamy a≈º URL siƒô zaktualizuje)
    await expect(page).toHaveURL(/\/plans\/create\?step=2/, { timeout: 10000 });
    console.log("‚úÖ STEP 1 completed");

    // ==========================================
    // STEP 2: Wyb√≥r ƒáwicze≈Ñ
    // ==========================================
    console.log("\nüìç STEP 2: Wyb√≥r ƒáwicze≈Ñ");

    // Poczekaj na za≈Çadowanie ƒáwicze≈Ñ
    await page.waitForSelector('[data-testid^="exercise-card-"]', { timeout: 10000 });

    // Wybierz pierwsze 3 ƒáwiczenia (klikamy w karty)
    const exerciseCards = await page.locator('[data-testid^="exercise-card-"]').all();
    console.log(`üìä Znaleziono ${exerciseCards.length} ƒáwicze≈Ñ`);

    if (exerciseCards.length >= 3) {
      await exerciseCards[0].click();
      await exerciseCards[1].click();
      await exerciseCards[2].click();
      console.log("‚úÖ Wybrano 3 ƒáwiczenia");
    } else {
      throw new Error("Za ma≈Ço ƒáwicze≈Ñ w katalogu!");
    }

    // Sprawd≈∫ czy banner pokazuje wybrane ƒáwiczenia
    await expect(page.getByTestId("selected-count-banner")).toBeVisible();
    await expect(page.getByTestId("selected-count-banner")).toContainText("3");

    // Kliknij "Dalej"
    await page.getByTestId("wizard-next-button").click();

    // Sprawd≈∫ czy jeste≈õmy w Step 3 (czekamy a≈º URL siƒô zaktualizuje)
    await expect(page).toHaveURL(/\/plans\/create\?step=3/, { timeout: 10000 });
    console.log("‚úÖ STEP 2 completed");

    // ==========================================
    // STEP 3: Konfiguracja serii (domy≈õlne warto≈õci)
    // ==========================================
    console.log("\nüìç STEP 3: Konfiguracja serii");

    // Poczekaj na za≈Çadowanie konfiguratora
    await page.waitForTimeout(1000); // Daj czas na inicjalizacjƒô

    // Sprawd≈∫ czy przycisk "Zapisz plan" jest widoczny
    await expect(page.getByTestId("wizard-save-button")).toBeVisible();

    // W Step 3 domy≈õlnie ka≈ºde ƒáwiczenie ma 1 seriƒô z domy≈õlnymi warto≈õciami
    // Mo≈ºemy od razu zapisaƒá plan
    console.log("‚úÖ Domy≈õlne serie zaakceptowane");

    // Kliknij "Zapisz plan" - poczekaj na request POST /api/plans
    console.log("üîÑ Klikam przycisk Zapisz plan...");

    // Czekamy na request do API i nawigacjƒô
    const responsePromise = page.waitForResponse(
      (response) => response.url().includes("/api/plans") && response.request().method() === "POST",
      { timeout: 30000 }
    );

    await page.getByTestId("wizard-save-button").click();

    console.log("‚è≥ Czekam na odpowied≈∫ z serwera...");
    await responsePromise;
    console.log("üì§ Request zapisu planu zosta≈Ç wys≈Çany i otrzymano odpowied≈∫");

    // ==========================================
    // VERIFY: Sprawd≈∫ czy plan pojawi≈Ç siƒô na li≈õcie
    // ==========================================
    console.log("\nüìç VERIFY: Sprawdzanie czy plan zosta≈Ç utworzony");

    // Poczekaj na przekierowanie do /plans
    await expect(page).toHaveURL(/\/plans$/, { timeout: 20000 });
    console.log("‚úÖ Przekierowano do listy plan√≥w");

    // Sprawd≈∫ czy plan jest na li≈õcie
    const planLink = page.getByRole("link", { name: new RegExp(testPlanName) });
    await expect(planLink).toBeVisible({ timeout: 5000 });
    console.log(`‚úÖ Plan "${testPlanName}" jest widoczny na li≈õcie!`);

    // ==========================================
    // PODSUMOWANIE
    // ==========================================
    console.log("\n" + "=".repeat(60));
    console.log("üéâ TEST ZAKO≈ÉCZONY POMY≈öLNIE!");
    console.log("=".repeat(60));
    console.log("‚úÖ Step 1: Wype≈Çniono podstawowe informacje");
    console.log("‚úÖ Step 2: Wybrano 3 ƒáwiczenia");
    console.log("‚úÖ Step 3: Zaakceptowano domy≈õlne serie");
    console.log("‚úÖ Plan zosta≈Ç zapisany");
    console.log(`‚úÖ Plan "${testPlanName}" pojawi≈Ç siƒô na li≈õcie`);
    console.log("\nüéä Pe≈Çny flow tworzenia planu dzia≈Ça poprawnie!");
  });
});
