---
import Layout from "../layouts/Layout.astro";
import { mockExerciseTemplates, getExerciseTemplatesByCategory } from "@/lib/mocks";

// Grupowanie ƒáwicze≈Ñ po kategoriach
const categories = [
  { id: "strength", label: "Si≈Çowe", icon: "üí™" },
  { id: "cardio", label: "Cardio", icon: "üèÉ" },
  { id: "flexibility", label: "RozciƒÖganie", icon: "üßò" },
  { id: "sports", label: "Sport", icon: "‚öΩ" },
  { id: "other", label: "Inne", icon: "üéØ" },
] as const;

// Mapy trudno≈õci i sprzƒôtu
const difficultyLabels = {
  beginner: { label: "PoczƒÖtkujƒÖcy", class: "bg-green-500/10 text-green-500" },
  intermediate: { label: "≈öredniozaawansowany", class: "bg-yellow-500/10 text-yellow-500" },
  advanced: { label: "Zaawansowany", class: "bg-red-500/10 text-red-500" },
};

const muscleGroupLabels: Record<string, string> = {
  chest: "Klatka",
  back: "Plecy",
  shoulders: "Barki",
  biceps: "Biceps",
  triceps: "Triceps",
  legs: "Nogi",
  glutes: "Po≈õladki",
  core: "Core",
  cardio: "Cardio",
  "full-body": "Ca≈Çe cia≈Ço",
};
---

<Layout title="Katalog ƒÜwicze≈Ñ - Fitness Tracker">
  <div class="mb-8">
    <h1 class="text-4xl font-bold mb-2">Katalog ƒÜwicze≈Ñ</h1>
    <p class="text-lg text-muted-foreground">
      PrzeglƒÖdaj dostƒôpne ƒáwiczenia i dodaj je do swojego treningu
    </p>
  </div>

  <!-- Nawigacja po kategoriach -->
  <div class="flex flex-wrap gap-2 mb-8">
    <button
      class="inline-flex items-center gap-2 px-4 py-2 rounded-lg border bg-primary text-primary-foreground hover:bg-primary/90 transition-colors filter-btn active"
      data-category="all"
    >
      <span>üìã</span>
      <span class="font-medium">Wszystkie</span>
      <span class="text-xs bg-primary-foreground/20 text-primary-foreground px-2 py-0.5 rounded-full">
        {mockExerciseTemplates.length}
      </span>
    </button>
    {
      categories.map((category) => {
        const count = getExerciseTemplatesByCategory(category.id).length;
        return (
          <button
            class="inline-flex items-center gap-2 px-4 py-2 rounded-lg border bg-card hover:bg-accent hover:text-accent-foreground transition-colors filter-btn"
            data-category={category.id}
          >
            <span>{category.icon}</span>
            <span class="font-medium">{category.label}</span>
            <span class="text-xs bg-primary/10 text-primary px-2 py-0.5 rounded-full">{count}</span>
          </button>
        );
      })
    }
  </div>

  <!-- Grid z ƒáwiczeniami -->
  {
    categories.map((category) => {
      const exercises = getExerciseTemplatesByCategory(category.id);
      if (exercises.length === 0) return null;

      return (
        <section class="exercise-section mb-12" data-category={category.id}>
          <h2 class="text-2xl font-bold mb-4 flex items-center gap-2">
            <span>{category.icon}</span>
            <span>{category.label}</span>
          </h2>

          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {exercises.map((exercise) => (
              <article class="exercise-card group border rounded-lg bg-card hover:border-primary hover:shadow-lg transition-all duration-200 overflow-hidden" data-category={category.id}>
                {/* Header karty */}
                <div class="p-4 border-b bg-muted/30">
                  <h3 class="font-semibold text-lg group-hover:text-primary transition-colors">
                    {exercise.name}
                  </h3>
                  {exercise.description && (
                    <p class="text-sm text-muted-foreground mt-1">{exercise.description}</p>
                  )}
                </div>

                {/* Cia≈Ço karty */}
                <div class="p-4 space-y-3">
                  {/* Poziom trudno≈õci */}
                  {exercise.difficulty && (
                    <div class="flex items-center gap-2">
                      <span class="text-xs font-medium text-muted-foreground">Poziom:</span>
                      <span
                        class={`text-xs font-medium px-2 py-1 rounded ${difficultyLabels[exercise.difficulty].class}`}
                      >
                        {difficultyLabels[exercise.difficulty].label}
                      </span>
                    </div>
                  )}

                  {/* Partie miƒô≈õniowe */}
                  {exercise.muscleGroups && exercise.muscleGroups.length > 0 && (
                    <div>
                      <span class="text-xs font-medium text-muted-foreground">Partie miƒô≈õniowe:</span>
                      <div class="flex flex-wrap gap-1 mt-1">
                        {exercise.muscleGroups.map((muscle) => (
                          <span class="text-xs bg-primary/5 text-primary px-2 py-0.5 rounded">
                            {muscleGroupLabels[muscle] || muscle}
                          </span>
                        ))}
                      </div>
                    </div>
                  )}

                  {/* Sprzƒôt */}
                  {exercise.equipment && exercise.equipment.length > 0 && (
                    <div>
                      <span class="text-xs font-medium text-muted-foreground">Sprzƒôt:</span>
                      <div class="flex flex-wrap gap-1 mt-1">
                        {exercise.equipment.map((item) => (
                          <span class="text-xs bg-muted text-muted-foreground px-2 py-0.5 rounded">
                            {item}
                          </span>
                        ))}
                      </div>
                    </div>
                  )}

                  {/* Instrukcje */}
                  {exercise.instructions && (
                    <div class="pt-2 border-t">
                      <p class="text-xs text-muted-foreground leading-relaxed">
                        {exercise.instructions}
                      </p>
                    </div>
                  )}
                </div>

                {/* Footer karty z akcjami */}
                <div class="p-4 pt-0">
                  <button class="w-full inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium bg-primary text-primary-foreground hover:bg-primary/90 h-9 px-4 transition-colors">
                    <span>‚ûï</span>
                    <span>Dodaj do treningu</span>
                  </button>
                </div>
              </article>
            ))}
          </div>
        </section>
      );
    })
  }

  <!-- Informacja o liczbie ƒáwicze≈Ñ -->
  <div class="mt-12 p-6 rounded-lg bg-muted/50 text-center">
    <p class="text-sm text-muted-foreground">
      ≈ÅƒÖcznie dostƒôpnych: <span class="font-bold text-foreground">{mockExerciseTemplates.length}</span> ƒáwicze≈Ñ
    </p>
  </div>
</Layout>

<script>
  // Filtrowanie ƒáwicze≈Ñ po kategorii
  const filterButtons = document.querySelectorAll(".filter-btn");
  const exerciseSections = document.querySelectorAll(".exercise-section");

  filterButtons.forEach((button) => {
    button.addEventListener("click", (e) => {
      const target = e.currentTarget as HTMLElement;
      const selectedCategory = target.dataset.category;

      // Aktualizacja stanu aktywnego przycisku
      filterButtons.forEach((btn) => {
        btn.classList.remove("active", "bg-primary", "text-primary-foreground");
        btn.classList.add("bg-card");
      });

      target.classList.add("active", "bg-primary", "text-primary-foreground");
      target.classList.remove("bg-card");

      // Filtrowanie sekcji
      if (selectedCategory === "all") {
        // Poka≈º wszystkie sekcje
        exerciseSections.forEach((section) => {
          (section as HTMLElement).style.display = "block";
        });
      } else {
        // Poka≈º tylko wybranƒÖ kategoriƒô
        exerciseSections.forEach((section) => {
          const sectionCategory = (section as HTMLElement).dataset.category;
          if (sectionCategory === selectedCategory) {
            (section as HTMLElement).style.display = "block";
          } else {
            (section as HTMLElement).style.display = "none";
          }
        });
      }
    });
  });
</script>
